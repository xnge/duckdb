<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 8a9acca6f (Revert all Github actions)
name: R
on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'examples/**'
      - 'test/**'
      - 'tools/juliapkg/**'
      - 'tools/nodejs/**'
      - 'tools/pythonpkg/**'
      - '.github/workflows/**'
      - '!.github/workflows/R.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/master' || github.sha }}
  cancel-in-progress: true

<<<<<<< HEAD
=======
defaults:
  run:
    shell: bash

>>>>>>> 8a9acca6f (Revert all Github actions)
env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}

jobs:
<<<<<<< HEAD

  r-test-extension:
    name: Extension for R test
    runs-on: ubuntu-latest
    container: ubuntu:16.04

    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/ubuntu_16_setup
      with:
        openssl: 1

    - uses: ./.github/actions/build_extensions
      with:
        run_tests: 0
        static_link_build: 1

    - uses: actions/upload-artifact@v2
      with:
        name: r-test-extensions
        path: |
          build/release/extension/*/*.duckdb_extension

  rstats-linux:
    name: R Package Linux
    runs-on: ubuntu-20.04
    needs: r-test-extension
=======
  rstats-linux:
    name: R Package Linux
    runs-on: ubuntu-20.04

>>>>>>> 8a9acca6f (Revert all Github actions)
    env:
      LIBARROW_BINARY : 'false'
      ARROW_RUNTIME_SIMD_LEVEL : 'AVX2'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - uses: r-lib/actions/setup-r@v1
      with:
        r-version: 'devel'

    - name: Install
      env:
        GITHUB_PAT: ${{ github.token }}
<<<<<<< HEAD
      shell: bash
=======
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: |
        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build texlive-latex-base texlive-fonts-extra libcurl4-openssl-dev valgrind pandoc
        mkdir -p $HOME/.R
        R -f tools/rpkg/dependencies.R

    - name: Prepare
<<<<<<< HEAD
      shell: bash
      run: |
        mkdir -p /tmp/duckdb_extensions
=======
      run: |
>>>>>>> 8a9acca6f (Revert all Github actions)
        cd tools/rpkg
        ./configure
        R CMD build .

<<<<<<< HEAD
    - uses: actions/download-artifact@v3
      with:
        name: r-test-extensions
        path: /tmp/duckdb_extensions

    - name: Tests
      shell: bash
      run: |
        ls /tmp/duckdb_extensions
        cd tools/rpkg
        R CMD INSTALL -d duckdb_*.tar.gz
        (cd tests && DUCKDB_R_TEST_EXTENSION_REQUIRED=1 R -f testthat.R)

    - name: R CMD check
      shell: bash
=======
    - name: Tests
      run: |
        cd tools/rpkg
        R CMD INSTALL -d duckdb_*.tar.gz
        (cd tests && R -f testthat.R)

    - name: R CMD check
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: |
        cd tools/rpkg
        _R_CHECK_CRAN_INCOMING_=FALSE _R_CHECK_PKG_SIZES_=FALSE R CMD check --as-cran -o /tmp duckdb_*.tar.gz
        if egrep 'NOTE|WARNING|ERROR' /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi

    - name: Print R log (1)
      # Print logs now only if success, for the case of failure there's another identical step below.
      if: ${{ success() }}
      run: |
        cat /tmp/duckdb.Rcheck/00check.log
        find /tmp/duckdb.Rcheck/ -type f -name "*.Rout*" -print0 | tee /dev/stderr | xargs -0 cat

    - name: Valgrind
<<<<<<< HEAD
      shell: bash
=======
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: |
        cd tools/rpkg
        export NOT_CRAN='false'
        _R_CHECK_CRAN_INCOMING_=FALSE _R_CHECK_PKG_SIZES_=FALSE R CMD check --use-valgrind -o /tmp duckdb_*.tar.gz

    - name: Print check directory tree
      if: ${{ always() }}
      run: |
        ls -R /tmp/duckdb.Rcheck

    - name: Print R log (2)
      if: ${{ always() }}
      run: |
        cat /tmp/duckdb.Rcheck/00check.log
        find /tmp/duckdb.Rcheck/ -type f -name "*.Rout*" -print0 | tee /dev/stderr | xargs -0 cat

    - name: Coverage
      env:
        DUCKDB_R_DEBUG: 1
<<<<<<< HEAD
      shell: Rscript {0}
      run: |
        pkgload::load_all("tools/rpkg")
        cov <- covr::codecov("tools/rpkg", relative_path = ".")

    - name: Print R log on failure
      if: ${{ failure() }}
      shell: bash
=======
      run: |
        pkgload::load_all("tools/rpkg")
        cov <- covr::codecov("tools/rpkg", relative_path = ".")
      shell: Rscript {0}

<<<<<<< HEAD
    - name: Print R log on failure
      if: ${{ failure() }}
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: |
        ls -R /tmp/duckdb.Rcheck
        cat /tmp/duckdb.Rcheck/00check.log
        cat /tmp/duckdb.Rcheck/tests/testthat.Rout.fail

=======
>>>>>>> 62546d01a (Always print all logs, separately for regular and valgrind)
    - name: Deploy
<<<<<<< HEAD
      shell: bash
=======
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: python scripts/asset-upload-gha.py duckdb_r_src.tar.gz=tools/rpkg/duckdb_*.tar.gz

  rstats-linux-debug:
    name: R Package Linux debug mode
    runs-on: ubuntu-20.04
    needs: rstats-linux

    env:
      LIBARROW_BINARY : 'false'
      ARROW_RUNTIME_SIMD_LEVEL : 'AVX2'
      DUCKDB_R_DEBUG: 1
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - uses: r-lib/actions/setup-r@v1
      with:
        r-version: 'devel'

    - name: Install
      env:
        GITHUB_PAT: ${{ github.token }}
      run: |
        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build libcurl4-openssl-dev
        mkdir -p $HOME/.R
        R -f tools/rpkg/dependencies.R

    - name: Build
      run: |
        cd tools/rpkg
        ./configure
        R CMD INSTALL .

  rstats-windows:
    name: R Package Windows
    runs-on: windows-latest
    needs: rstats-linux

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - uses: r-lib/actions/setup-r@v1
      with:
        r-version: 'devel'

    - uses: r-lib/actions/setup-pandoc@v2

    - name: Install
<<<<<<< HEAD
      shell: bash
=======
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: |
        R -f tools/rpkg/dependencies.R

    - name: Build
<<<<<<< HEAD
      shell: bash
=======
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: |
        cd tools/rpkg
        ./configure
        R CMD build .
        R CMD INSTALL duckdb_*.tar.gz
        (cd tests && R -f testthat.R)
        _R_CHECK_CRAN_INCOMING_=FALSE _R_CHECK_PKG_SIZES_=FALSE R CMD check --as-cran --no-manual -o /tmp duckdb_*.tar.gz
        if egrep 'NOTE|WARNING|ERROR' /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi

  rubsan:
    name: R UBSAN
    runs-on: ubuntu-latest
    needs: rstats-linux

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run
<<<<<<< HEAD
      shell: bash
=======
>>>>>>> 8a9acca6f (Revert all Github actions)
      run: |
        (cd tools/rpkg && ./configure && R CMD build .)
<<<<<<< HEAD
        docker run -v `pwd`:/duckdb --cap-add SYS_PTRACE wch1/r-debug:latest bash -c "mkdir -p ~/.R && echo -e \"PKG_CFLAGS=-fno-sanitize-recover=all\\nPKG_CXXFLAGS=-fno-sanitize-recover=all\" > ~/.R/Makevars && export CMAKE_UNITY_BUILD=OFF ARROW_R_DEV=TRUE LIBARROW_BINARY=true && cd /duckdb/tools/rpkg/ && RDsan -f dependencies.R && RDsan CMD INSTALL duckdb_*.tar.gz && cd tests && UBSAN_OPTIONS=print_stacktrace=1 RDsan -f testthat.R"

    - name: Print R log on failure
      if: ${{ failure() }}
<<<<<<< HEAD
      shell: bash
      run: |
        cat duckdb.Rcheck/00check.log
        cat duckdb.Rcheck/tests/testthat.Rout.fail
=======
#name: R
#on:
#  push:
#    paths-ignore:
#      - '**.md'
#  pull_request:
#    paths-ignore:
#      - '**.md'
#      - 'examples/**'
#      - 'test/**'
#      - 'tools/juliapkg/**'
#      - 'tools/nodejs/**'
#      - 'tools/pythonpkg/**'
#      - '.github/workflows/**'
#      - '!.github/workflows/R.yml'
#
#concurrency:
#  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/master' || github.sha }}
#  cancel-in-progress: true
#
#defaults:
#  run:
#    shell: bash
#
#env:
#  GH_TOKEN: ${{ secrets.GH_TOKEN }}
#  TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
#  AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
#  AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
#  NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}
#
#jobs:
#  rstats-linux:
#    name: R Package Linux
#    runs-on: ubuntu-20.04
#
#    env:
#      LIBARROW_BINARY : 'false'
#      ARROW_RUNTIME_SIMD_LEVEL : 'AVX2'
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - uses: r-lib/actions/setup-r@v1
#      with:
#        r-version: 'devel'
#
#    - name: Install
#      env:
#        GITHUB_PAT: ${{ github.token }}
#      run: |
#        sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build texlive-latex-base texlive-fonts-extra libcurl4-openssl-dev valgrind pandoc
#        mkdir -p $HOME/.R
#        R -f tools/rpkg/dependencies.R
#
#    - name: Prepare
#      run: |
#        cd tools/rpkg
#        ./configure
#        R CMD build .
#
#    - name: Tests
#      run: |
#        cd tools/rpkg
#        R CMD INSTALL -d duckdb_*.tar.gz
#        (cd tests && R -f testthat.R)
#
#    - name: R CMD check
#      run: |
#        cd tools/rpkg
#        R CMD check --as-cran -o /tmp duckdb_*.tar.gz
#        if grep WARNING /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi
#
#    - name: Valgrind
#      run: |
#        cd tools/rpkg
#        export NOT_CRAN='false'
#        R CMD check --use-valgrind -o /tmp duckdb_*.tar.gz
#
#    - name: Coverage
#      env:
#        DUCKDB_R_DEBUG: 1
#      run: |
#        pkgload::load_all("tools/rpkg")
#        cov <- covr::codecov("tools/rpkg", relative_path = ".")
#      shell: Rscript {0}
#
#    - name: Print R log on failure
#      if: ${{ failure() }}
#      run: |
#        ls -R /tmp/duckdb.Rcheck
#        cat /tmp/duckdb.Rcheck/00check.log
#        cat /tmp/duckdb.Rcheck/tests/testthat.Rout.fail
#
#    - name: Deploy
#      run: python scripts/asset-upload-gha.py duckdb_r_src.tar.gz=tools/rpkg/duckdb_*.tar.gz
#
#  rstats-windows:
#    name: R Package Windows
#    runs-on: windows-latest
#    needs: rstats-linux
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: actions/setup-python@v2
#      with:
#        python-version: '3.7'
#
#    - uses: r-lib/actions/setup-r@v1
#      with:
#        r-version: 'devel'
#
#    - name: Install
#      run: |
#        R -f tools/rpkg/dependencies.R
#
#    - name: Build
#      run: |
#        cd tools/rpkg
#        ./configure
#        R CMD build .
#        R CMD INSTALL duckdb_*.tar.gz
#        (cd tests && R -f testthat.R)
#        R CMD check --as-cran --no-manual -o /tmp duckdb_*.tar.gz
#        if grep WARNING /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi
#
#  rubsan:
#    name: R UBSAN
#    runs-on: ubuntu-latest
#    needs: rstats-linux
#
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - name: Run
#      run: |
#        (cd tools/rpkg && ./configure && R CMD build .)
#        docker run -v `pwd`:/duckdb --cap-add SYS_PTRACE wch1/r-debug:latest bash -c "mkdir -p ~/.R && echo -e \"PKG_CFLAGS=-fno-sanitize-recover=all\\nPKG_CXXFLAGS=-fno-sanitize-recover=all\" > ~/.R/Makevars && export CMAKE_UNITY_BUILD=OFF ARROW_R_DEV=TRUE LIBARROW_BINARY=true && cd /duckdb/tools/rpkg/ && RDsan -f dependencies.R && RDsan CMD INSTALL duckdb_*.tar.gz && cd tests && UBSAN_OPTIONS=print_stacktrace=1 RDsan -f testthat.R"
#
#    - name: Print R log on failure
#      if: ${{ failure() }}
#      run: |
#        cat duckdb.Rcheck/00check.log
#        cat duckdb.Rcheck/tests/testthat.Rout.fail
>>>>>>> 7b454bc83 (SQLancer CI)
=======
      run: |
        cat duckdb.Rcheck/00check.log
        cat duckdb.Rcheck/tests/testthat.Rout.fail
>>>>>>> 8a9acca6f (Revert all Github actions)
=======
        docker run -v `pwd`:/duckdb --cap-add SYS_PTRACE wch1/r-debug:latest bash -c /duckdb/scripts/r_ubsan.sh
>>>>>>> f3ce82742 (Extract script, run examples)
